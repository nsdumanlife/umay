---
globs: 'frontend/**/*.vue,frontend/**/*.ts'
description: 'Vue.js 3 with TypeScript patterns and standards'
---

# Frontend Vue.js 3 Standards

## Component Structure

- Use **Composition API** with `<script setup>` syntax
- Define clear TypeScript interfaces for props and emits
- Use **mobile-first CSS** approach, avoid Tailwind CSS
- Avoid inline CSS unless justified

## State Management

- Use **Pinia stores** in [frontend/src/stores/](mdc:frontend/src/stores/) for global state
- Keep component state local when possible
- Use reactive refs and computed properties appropriately

## CSS Standards

- **Mobile-first approach**: Start with mobile styles, then add desktop breakpoints
- Use custom CSS properties (CSS variables) defined in [frontend/src/assets/variables.css](mdc:frontend/src/assets/variables.css)
- Organize styles in separate CSS files rather than inline
- Use semantic class names

## Example Component Structure

```vue
<script setup lang="ts">
import { ref, computed, nextTick } from 'vue'
import { useChatStore } from '@/stores/text-chat'

interface Message {
  id: string
  text: string
  isUser: boolean
  timestamp: Date
}

const chatStore = useChatStore()
const inputMessage = ref('')
const messagesContainer = ref<HTMLElement>()

const messages = computed(() => chatStore.messages)
const isLoading = computed(() => chatStore.isLoading)

const handleSubmit = async () => {
  if (!inputMessage.value.trim() || isLoading.value) return

  try {
    await chatStore.sendMessage(inputMessage.value)
    inputMessage.value = ''

    // Scroll to bottom after message is added
    await nextTick()
    scrollToBottom()
  } catch (error) {
    console.error('Failed to send message:', error)
  }
}

const scrollToBottom = () => {
  if (messagesContainer.value) {
    messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight
  }
}
</script>

<template>
  <div class="chat-component">
    <div class="chat-messages" ref="messagesContainer">
      <div
        v-for="message in messages"
        :key="message.id"
        class="message"
        :class="{ 'message--user': message.isUser }"
      >
        {{ message.text }}
      </div>
    </div>

    <form @submit.prevent="handleSubmit" class="chat-form">
      <input
        v-model="inputMessage"
        type="text"
        placeholder="Type your message..."
        :disabled="isLoading"
        class="chat-input"
      />
      <button
        type="submit"
        :disabled="isLoading || !inputMessage.trim()"
        class="chat-submit"
      >
        {{ isLoading ? 'Sending...' : 'Send' }}
      </button>
    </form>
  </div>
</template>

<style scoped>
.chat-component {
  display: flex;
  flex-direction: column;
  height: 100%;
  max-width: 100%;
}

.chat-messages {
  flex: 1;
  overflow-y: auto;
  padding: 1rem;
  gap: 0.5rem;
  display: flex;
  flex-direction: column;
}

.message {
  padding: 0.75rem;
  border-radius: 0.5rem;
  background-color: var(--color-background-soft);
  max-width: 80%;
}

.message--user {
  background-color: var(--color-primary);
  color: var(--color-primary-contrast);
  align-self: flex-end;
}

.chat-form {
  display: flex;
  padding: 1rem;
  gap: 0.5rem;
  border-top: 1px solid var(--color-border);
}

.chat-input {
  flex: 1;
  padding: 0.75rem;
  border: 1px solid var(--color-border);
  border-radius: 0.375rem;
  font-size: 1rem;
}

.chat-submit {
  padding: 0.75rem 1.5rem;
  background-color: var(--color-primary);
  color: var(--color-primary-contrast);
  border: none;
  border-radius: 0.375rem;
  font-size: 1rem;
  cursor: pointer;
  transition: opacity 0.2s;
}

.chat-submit:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Desktop styles */
@media (min-width: 768px) {
  .message {
    max-width: 60%;
  }

  .chat-form {
    padding: 1.5rem;
  }
}
</style>

## Performance - Use `v-memo` for expensive list items when appropriate -
Implement lazy loading for large datasets - Use Vuetify components efficiently,
tree-shake unused components description: globs: alwaysApply: false ---
```
